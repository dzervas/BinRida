{%- from "_macros.js.j2" import argparse, function_header -%}
{{ function_header(bv, func) }}
let index = 0;

Interceptor.attach(func_{{ func.start }}_ptr, {
	onEnter(args) {
		if (index > 50) {
			Interceptor.detachAll();
			throw new Error(`{{ func.name }}: Maximum call depth exceeded (${index - 1}), detaching all intercepts`);
		}

		this.index = index;
		send({
			"context": this.context,
			"return": this.returnAddress.sub(func_{{ func.start }}_module),
			"depth": this.depth,
			"thread_id": this.threadId,
			"index": index++,
			"args": {
				{% for param in func.parameter_vars -%}
					{%- set index = loop.index0 | string -%}
					"{{ param.name }}": {{- argparse(param, "args[" + index + "]") -}},
				{% endfor %}
			}
		})
	},
	onLeave(retval) {
		send({
			"context": this.context ? this.context : {},
			"retval": retval ? retval : "",
			"index": this.index,
		})
	}
});

{%- from "_macros.js.j2" import argparse, function_header -%}
{{ function_header(bv, func) }}
let index = 0;

const {{ func.name }}_intercept = Interceptor.attach({{ func.name }}_ptr, {
	onEnter: args => {
		if (index > 20) {
			Interceptor.detachAll();
			throw new Error(`{{ func.name }}: Maximum call depth exceeded (${index}), detaching all intercepts`);
		}

		this.index = index;
		send({
			"context": this.context ? this.context : {},
			"return": this.returnAddress ? this.returnAddress : 0,
			"depth": this.depth ? this.depth : -1,
			"thread_id": this.threadId ? this.threadId : -1,
			"ranges": Process.enumerateRanges('---'),
			"index": index++,
			"args": {
				{% for param in func.parameter_vars -%}
					{%- set index = loop.index0 | string -%}
					"{{ param.name }}": {{- argparse(param, "args[" + index + "]") -}},
				{% endfor %}
			}
		})
	},
	onLeave: retval => {
		send({
			"context": this.context ? this.context : {},
			"retval": retval ? retval : "",
			"index": this.index,
			"ranges": Process.enumerateRanges('---'),
		})
	}
});

{%- from "_macros.js.j2" import argparse, function_header, type_translate -%}

{%- for func in targets -%}
{{ function_header(bv, func) }}
{% if "@replace" in func.comment -%}
function {{ func.name }}_replace({{ func.parameter_vars | map(attribute="name") | join(", ") }}) {
	{{ func.comment.split("@replace:")[1].split("\n")[0].strip() }}
}
Interceptor.replace({{ func.name }}_ptr, new NativeCallback({{ func.name }}_replace, {{ type_translate(func.return_type) }}, [{% for p in func.parameter_vars %}{{ type_translate(p.type) }}, {% endfor %}]))
{% elif "@attach" in func.comment -%}
{% else -%}
Interceptor.attach({{ func.name }}_ptr, {
	onEnter: function(args) {
		send({
			"event": "call",
			"function": "{{ func.name }}",
			"address": {{ "%#x" % func.start }},
			"args": {
				{%- for param in func.parameter_vars -%}
					{%- set index = loop.index0 | string -%}
					{{ param.name }}: {{- argparse(param, "args[" + index + "]") -}},
				{%- endfor -%}
			}
		});

		{%- if "@prehook" in func.comment %}
		{% for param in func.parameter_vars %}
			{%- set index = loop.index0 | string -%}
			const {{ param.name }} = {{- argparse(param, "args[" + index + "]") -}};
		{% endfor %}
		{{ func.comment.split("@prehook:")[1].split("\n")[0].strip() }};
		{%- endif %}
	},
	onLeave: function(retval) {
		{%- if "@ret" in func.comment -%}
		{%- set new_retval = func.comment.split("@ret:")[1].split("\n")[0].strip() -%}
		{%- endif %}
		send({
			"event": "return",
			"function": "{{ func.name }}",
			"address": {{ "%#x" % func.start }},
			"retval": retval,
			{% if "@ret" in func.comment %}
			"new_retval": {{ new_retval }},
			{% endif %}
		});

		{%- if "@posthook" in func.comment %}
		{{ func.comment.split("@posthook:")[1].split("\n")[0].strip() }}
		{% endif -%}
		{%- if "@ret" in func.comment %}
		retval.replace({{ new_retval }})
		{%- endif %}
	}
});
{% endif -%}
{% endfor %}
